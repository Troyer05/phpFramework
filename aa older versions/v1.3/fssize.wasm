(module
  (import "js" "log" (func $log (param i32)))

  (func (export "afs") (param i32) (result f64)
    (local f64 $sum)
    (local i32 $i)

    (local f64 $currentSize)

    (f64.const 0)
    (local.set $sum)

    (local.get 0)
    (local.set $i)

    (loop $loop
      (local.get $i)
      (i32.const 4)
      (i32.mul)
      
      (i32.add)
      (f64.load)
      (local.set $currentSize)

      (local.get $sum)
      (local.get $currentSize)
      (f64.add)
      (local.set $sum)

      (i32.const 1)
      (local.get $i)
      (i32.add)
      (local.set $i)
      
      (local.get $i)
      (i32.load)

      (i32.const 0)
      (i32.ne)

      (br_if $loop)
    )

    (local.get $sum)
    (call $formatAndLogFileSize)
  )

  (func $formatAndLogFileSize (param f64)
    (local f64 $size)
    (local i32 $unitIndex)
    (local f64 $divisor)
    (local f64 $formattedSize)

    (f64.const 1024)
    (local.set $divisor)
    
    (f64.const 0)
    (local.set $unitIndex)

    (loop
      (local.get $size)
      (local.get $divisor)
      (f64.div)
      (f64.const 1)
      (f64.lt)

      (if (then)
        (br 1)

        (else
          (local.get $unitIndex)
          (f64.const 1)
          (i32.add)
          (local.set $unitIndex)
          (f64.const 1024)
          (local.get $divisor)
          (f64.mul)
          (local.set $divisor)
          
          (br 0)
        )
      )
    )

    (local.get $size)
    (local.get $divisor)
    
    (f64.div)
    (local.set $formattedSize)

    (local.get $formattedSize)
    (local.get $unitIndex)

    (call $log)
  )
)
